version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - swens

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - swens

  user-service-db:
    image: postgres:15
    container_name: user-service-db
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: admin_user
      POSTGRES_PASSWORD: password
    ports:
      - "5000:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - swens

  task-mongodb:
    image: mongo:6
    container_name: task-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin_user
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - task_mongodata:/data/db
    networks:
      - swens

  workflow-mongodb:
    image: mongo:6
    container_name: workflow-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin_user
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - workflow_mongodata:/data/db
    networks:
      - swens


  user-service:
    build:
      context: ./user-service
    container_name: user-service
    depends_on:
      - user-service-db
    environment:
      SERVER_PORT: 4000
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-service-db:5432/db
      SPRING_DATASOURCE_USERNAME: admin_user
      SPRING_DATASOURCE_PASSWORD: password
      GRPC_SERVER_PORT: 9090
    networks:
      - swens

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    depends_on:
      - user-service
    environment:
      SERVER_PORT: 3000
      GRPC_CLIENT_USERSERVICE_ADDRESS: static://user-service:9090
      JWT_SECRET: vLw4a7v7D1XqXx+MshFwPVmIb7A3DCw2r+VtGMLglWc=
    networks:
      - swens

  task-service:
    build:
      context: ./task-service
    container_name: task-service
    depends_on:
      - task-mongodb
      - user-service
      - kafka
      - zookeeper
    environment:
      SERVER_PORT: 6000
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin_user:password@task-mongodb:27017
      SPRING_DATA_MONGODB_DATABASE: db
      GRPC_CLIENT_USERSERVICE_ADDRESS: static://user-service:9090

      # Kafka config
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - swens

  workflow-service:
    build:
      context: ./workflow-service
    container_name: workflow-service
    depends_on:
      - workflow-mongodb
      - user-service
      - kafka
      - zookeeper
    environment:
      SERVER_PORT: 7000
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin_user:password@workflow-mongodb:27017
      SPRING_DATA_MONGODB_DATABASE: db
      GRPC_CLIENT_USERSERVICE_ADDRESS: static://user-service:9090

      # Kafka config
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - swens
    # No ports mapping = NOT exposed to localhost

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - auth-service
      - user-service
      - task-service
      - workflow-service
    networks:
      - swens

volumes:
  pgdata:
  task_mongodata:
  workflow_mongodata:

networks:
  swens:
    external: true
